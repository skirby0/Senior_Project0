package com.example.virib.senior_project_1

/*
enum class CardSuit {
    H, D, C, S,
}
enum class Rank {
    A, K, Q, J, Ten, Nine, Eight, Seven, Six, Five, Four, Three, Two, One,
}
enum class Value{

}
class PlayingCard(val suit: String, val rank: String, val cardValue: Int, val faceUp: Boolean){

 }*/
open class playingCard(val suit: String, val rank: String, val cardValue: Int, val faceUp: Boolean){}
/*
    val HA = object : playingCard("H","Ace",-2,false){}
    val HK = object : playingCard("H","King",0,false){}
    val HQ = object : playingCard("H","Queen",10,false){}
    val HJ = object : playingCard("H","Jack",10,false){}
    val HTen = object : playingCard("H","Ten",10,false){}
    val HNine = object : playingCard("H","Nine",9,false){}
    val HEight = object : playingCard("H","Eight",8,false){}
    val HSeven = object : playingCard("H","Seven",7,false){}
    val HSix = object : playingCard("H","Six",6,false){}
    val HFive = object : playingCard("H","Five",5,false){}
    val HFour = object : playingCard("H","Four",4,false){}
    val HThree = object : playingCard("H","Three",3,false){}
    val HTwo = object : playingCard("H","Two",2,false){}
    val DA = object : playingCard("D","Ace",-2,false){}
    val DK = object : playingCard("D","King",0,false){}
    val DQ = object : playingCard("D","Queen",10,false){}
    val DJ = object : playingCard("D","Jack",10,false){}
    val DTen = object : playingCard("D","Ten",10,false){}
    val DNine = object : playingCard("D","Nine",9,false){}
    val DEight = object : playingCard("D","Eight",8,false){}
    val DSeven = object : playingCard("D","Seven",7,false){}
    val DSix = object : playingCard("D","Six",6,false){}
    val DFive = object : playingCard("D","Five",5,false){}
    val DFour = object : playingCard("D","Four",4,false){}
    val DThree = object : playingCard("D","Three",3,false){}
    val DTwo = object : playingCard("D","Two",2,false){}
    val CA = object : playingCard("C","Ace",-2,false){}
    val CK = object : playingCard("C","King",0,false){}
    val CQ = object : playingCard("C","Queen",10,false){}
    val CJ = object : playingCard("C","Jack",10,false){}
    val CTen = object : playingCard("C","Ten",10,false){}
    val CNine = object : playingCard("C","Nine",9,false){}
    val CEight = object : playingCard("C","Eight",8,false){}
    val CSeven = object : playingCard("C","Seven",7,false){}
    val CSix = object : playingCard("C","Six",6,false){}
    val CFive = object : playingCard("C","Five",5,false){}
    val CFour = object : playingCard("C","Four",4,false){}
    val CThree = object : playingCard("C","Three",3,false){}
    val CTwo = object : playingCard("C","Two",2,false){}
    val SA = object : playingCard("S","Ace",-2,false){}
    val SK = object : playingCard("S","King",0,false){}
    val SQ = object : playingCard("S","Queen",10,false){}
    val SJ = object : playingCard("S","Jack",10,false){}
    val STen = object : playingCard("S","Ten",10,false){}
    val SNine = object : playingCard("S","Nine",9,false){}
    val SEight = object : playingCard("S","Eight",8,false){}
    val SSeven = object : playingCard("S","Seven",7,false){}
    val SSix = object : playingCard("S","Six",6,false){}
    val SFive = object : playingCard("S","Five",5,false){}
    val SFour = object : playingCard("S","Four",4,false){}
    val SThree = object : playingCard("S","Three",3,false){}
    val STwo = object : playingCard("S","Two",2,false){}

    val deck = listOf<playingCard>(HA,HK,HQ,HJ,HTen,HNine,HEight,HSeven,HSix,HFive,HFour,HThree,HTwo,
        DA,DK,DQ,DJ,DTen,DNine,DEight,DSeven,DSix,DFive,DFour,DThree,DTwo,
        CA,CK,CQ,CJ,CTen,CNine,CEight,CSeven,CSix,CFive,CFour,CThree,CTwo,
        SA,SK,SQ,SJ,STen,SNine,SEight,SSeven,SSix,SFive,SFour,SThree,STwo)
        */
